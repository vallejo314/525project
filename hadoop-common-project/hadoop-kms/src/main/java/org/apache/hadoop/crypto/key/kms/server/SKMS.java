package org.apache.hadoop.crypto.key.kms.server;

import java.security.PrivilegedExceptionAction;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.math.BigInteger;
import java.net.HttpURLConnection;
import java.net.URISyntaxException;
import java.net.URL;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.apache.commons.codec.binary.Base64;
import org.apache.hadoop.crypto.key.KeyProvider;
import org.apache.hadoop.crypto.key.KeyProvider.KeyVersion;
import org.apache.hadoop.crypto.key.kms.KMSClientProvider;
import org.apache.hadoop.crypto.key.kms.KMSRESTConstants;
import org.apache.hadoop.crypto.key.kms.server.KMS.KMSOp;
import org.apache.hadoop.security.UserGroupInformation;
import org.apache.hadoop.security.token.delegation.web.HttpUserGroupInformation;

import com.tiemens.secretshare.engine.SecretShare;
import com.tiemens.secretshare.engine.SecretShare.CombineOutput;
import com.tiemens.secretshare.engine.SecretShare.PublicInfo;
import com.tiemens.secretshare.engine.SecretShare.ShareInfo;
import com.tiemens.secretshare.engine.SecretShare.SplitSecretOutput;

public class SKMS extends KMS {

	// Used for determining secret sharing parameters
	private int numForReconstruction;
	private List<String> DKMSAddresses;
	
	public SKMS() throws Exception {
		super();
		this.numForReconstruction = 3;
	}
	
	
	/**
	 * Use secret sharing to split an autogenerated key into multiple parts.
	 * @return
	 */
	private List<String> generateKeys(String key) {
		BigInteger intKey = new BigInteger(key);
		Integer numDKMS = new Integer(DKMSAddresses.size());
		SecretShare.PublicInfo info = new SecretShare.PublicInfo(numDKMS, numForReconstruction,
				intKey, "split");
		SecretShare splitter = new SecretShare(info);
		SplitSecretOutput splitSecret = splitter.split(intKey);
		
		ArrayList<String >keys = new ArrayList<String>();
		List<ShareInfo> infos = splitSecret.getShareInfos();
		for(int i = 0; i < DKMSAddresses.size(); i++) {
			keys.add(Integer.toString(infos.get(i).getPublicInfo().getK()));
		}
		return keys;
	}
	
	private String recoverKey(List<String> keys) {
		ArrayList<ShareInfo> shares = new ArrayList<ShareInfo>();
		SecretShare splitter = null;
		for(int i = 0; i < keys.size(); i++) {
			BigInteger intKey = new BigInteger(keys.get(i).getBytes());
			Integer numDKMS = new Integer(DKMSAddresses.size());
			SecretShare.PublicInfo info = new SecretShare.PublicInfo(numDKMS, numForReconstruction,
					intKey, "split");
			ShareInfo share = new ShareInfo(i, intKey, info);
			shares.add(share);
			splitter = new SecretShare(info);
		}
		return splitter.combine(shares).toString();
	}
	
  @POST
  @Path(KMSRESTConstants.KEYS_RESOURCE)
  @Consumes(MediaType.APPLICATION_JSON)
  @Produces(MediaType.APPLICATION_JSON)
  @SuppressWarnings("unchecked")
  @Override
	public Response createKey(Map jsonKey) throws Exception {
    KMSWebApp.getAdminCallsMeter().mark();
    UserGroupInformation user = HttpUserGroupInformation.get();
    final String name = (String) jsonKey.get(KMSRESTConstants.NAME_FIELD);
    KMSClientProvider.checkNotEmpty(name, KMSRESTConstants.NAME_FIELD);
    assertAccess(KMSACLs.Type.CREATE, user, KMSOp.CREATE_KEY, name);
    String cipher = (String) jsonKey.get(KMSRESTConstants.CIPHER_FIELD);
    final String material = (String) jsonKey.get(KMSRESTConstants.MATERIAL_FIELD);
    int length = (jsonKey.containsKey(KMSRESTConstants.LENGTH_FIELD))
                 ? (Integer) jsonKey.get(KMSRESTConstants.LENGTH_FIELD) : 0;
    String description = (String)
        jsonKey.get(KMSRESTConstants.DESCRIPTION_FIELD);
    Map<String, String> attributes = (Map<String, String>)
        jsonKey.get(KMSRESTConstants.ATTRIBUTES_FIELD);
    if (material != null) {
      assertAccess(KMSACLs.Type.SET_KEY_MATERIAL, user,
          KMSOp.CREATE_KEY, name);
    }
    
    KeyProvider.KeyVersion keyVersion = new KeyProvider.KeyVersion(name, "1", material.getBytes());
    List<String> keys = this.generateKeys(new String(keyVersion.getMaterial()));
    for (int i = 0; i < DKMSAddresses.size(); i++) {

      kmsAudit.ok(user, KMSOp.CREATE_KEY, name, "UserProvidedMaterial:" +
          (material != null) + " Description:" + description);
      
      HttpURLConnection connection = null;  
      try {
        URL url = new URL(DKMSAddresses.get(i) + DKMS.INSERT);
        connection = (HttpURLConnection)url.openConnection();
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Content-Type", 
            "application/x-www-form-urlencoded");

        connection.setRequestProperty("Content-Length",  name + "/" +
            Integer.toString(keys.get(i).getBytes().length));
        connection.setRequestProperty("Content-Language", "en-US");  

        connection.setUseCaches(false);
        connection.setDoOutput(true);

        //Send request
        DataOutputStream wr = new DataOutputStream (
            connection.getOutputStream());
        wr.writeByte(keys.get(i).getBytes().length);
        wr.close();

        InputStream is = connection.getInputStream();
        BufferedReader rd = new BufferedReader(new InputStreamReader(is));
        StringBuilder responseJ = new StringBuilder(); 
        String line;
        while((line = rd.readLine()) != null) {
          responseJ.append(line);
          responseJ.append('\r');
        }
        rd.close();
      } catch (Exception e) {
        e.printStackTrace();
        return null;
      } finally {
        if(connection != null) {
          connection.disconnect(); 
        }
      }
      
    }
    KeyProvider.KeyVersion keyVersion1 = new KeyProvider.KeyVersion(name, "1", material.getBytes());

    kmsAudit.ok(user, KMSOp.CREATE_KEY, name, "UserProvidedMaterial:" +
        (material != null) + " Description:" + description);

    if (!KMSWebApp.getACLs().hasAccess(KMSACLs.Type.GET, user)) {
      keyVersion1 = removeKeyMaterial(keyVersion1);
    }
    
    Map json = KMSServerJSONUtils.toJSON(keyVersion1);
    String requestURL = KMSMDCFilter.getURL();
    int idx = requestURL.lastIndexOf(KMSRESTConstants.KEYS_RESOURCE);
    requestURL = requestURL.substring(0, idx);
    String keyURL = requestURL + KMSRESTConstants.KEY_RESOURCE + "/" + name;
    return Response.created(getKeyURI(name)).type(MediaType.APPLICATION_JSON).
        header("Location", keyURL).entity(json).build();
  }
  
  @POST
  @Path(KMSRESTConstants.KEYS_METADATA_RESOURCE + "/{name:.*}")
  @Consumes(MediaType.APPLICATION_JSON)
  @Produces(MediaType.APPLICATION_JSON)
  @SuppressWarnings("unchecked")
  public Response getKey(Map jsonKey) {
    KMSWebApp.getAdminCallsMeter().mark();
    UserGroupInformation user = HttpUserGroupInformation.get();
    final String name = (String) jsonKey.get(KMSRESTConstants.NAME_FIELD);

    List<String> keys = new ArrayList<String>();
    for (int i = 0; i < DKMSAddresses.size(); i++) {
      HttpURLConnection connection = null;  
      try {
        URL url = new URL(DKMSAddresses.get(i) + DKMS.GET);
        connection = (HttpURLConnection)url.openConnection();
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Content-Type", 
            "application/x-www-form-urlencoded");

        connection.setRequestProperty("Content-Length", 
            Integer.toString(name.getBytes().length));
        connection.setRequestProperty("Content-Language", "en-US");  

        connection.setUseCaches(false);
        connection.setDoOutput(true);

        //Send request
        DataOutputStream wr = new DataOutputStream (
            connection.getOutputStream());
        wr.writeByte(name.getBytes().length);
        wr.close();

        InputStream is = connection.getInputStream();
        BufferedReader rd = new BufferedReader(new InputStreamReader(is));
        StringBuilder responseJ = new StringBuilder(); 
        String line;
        while((line = rd.readLine()) != null) {
          responseJ.append(line);
        }
        rd.close();
        keys.add(responseJ.toString());
      } catch (Exception e) {
        e.printStackTrace();
        return null;
      } finally {
        if(connection != null) {
          connection.disconnect(); 
        }
      }
      
    }
    
    String key = this.recoverKey(keys);
    Map json = KMSServerJSONUtils.toJSON(key, null);
    String requestURL = KMSMDCFilter.getURL();
    int idx = requestURL.lastIndexOf(KMSRESTConstants.KEYS_RESOURCE);
    requestURL = requestURL.substring(0, idx);
    String keyURL = requestURL + KMSRESTConstants.KEY_RESOURCE + "/" + name;
    try {
			return Response.created(getKeyURI(name)).type(MediaType.APPLICATION_JSON).
			    header("Location", keyURL).entity(json).build();
		} catch (URISyntaxException e) {
			e.printStackTrace();
		}
    return null;
  }
  
  @DELETE
  @Path(KMSRESTConstants.KEY_RESOURCE + "/{name:.*}")
  public Response deleteKey(@PathParam("name") final String name)
      throws Exception {
    KMSWebApp.getAdminCallsMeter().mark();
    UserGroupInformation user = HttpUserGroupInformation.get();
    assertAccess(KMSACLs.Type.DELETE, user, KMSOp.DELETE_KEY, name);
    KMSClientProvider.checkNotEmpty(name, "name");

    for (int i = 0; i < DKMSAddresses.size(); i++) {
      HttpURLConnection connection = null;  
      try {
        URL url = new URL(DKMSAddresses.get(i) + DKMS.REMOVE);
        connection = (HttpURLConnection)url.openConnection();
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Content-Type", 
            "application/x-www-form-urlencoded");

        connection.setRequestProperty("Content-Length", 
            Integer.toString(name.getBytes().length));
        connection.setRequestProperty("Content-Language", "en-US");  

        connection.setUseCaches(false);
        connection.setDoOutput(true);

        //Send request
        DataOutputStream wr = new DataOutputStream (
            connection.getOutputStream());
        wr.writeByte(name.getBytes().length);
        wr.close();

        InputStream is = connection.getInputStream();
        BufferedReader rd = new BufferedReader(new InputStreamReader(is));
        StringBuilder responseJ = new StringBuilder(); 
        String line;
        while((line = rd.readLine()) != null) {
          responseJ.append(line);
        }
        rd.close();
      } catch (Exception e) {
        e.printStackTrace();
        return null;
      } finally {
        if(connection != null) {
          connection.disconnect(); 
        }
      } 
    }
    kmsAudit.ok(user, KMSOp.DELETE_KEY, name, "");
    return Response.ok().build();
  }

  @POST
  @Path(KMSRESTConstants.KEYS_RESOURCE + "/update")
  @Consumes(MediaType.APPLICATION_JSON)
  @Produces(MediaType.APPLICATION_JSON)
  @SuppressWarnings("unchecked")
  public Response updateKey(Map jsonKey) throws Exception {
    KMSWebApp.getAdminCallsMeter().mark();
    UserGroupInformation user = HttpUserGroupInformation.get();
    final String name = (String) jsonKey.get(KMSRESTConstants.NAME_FIELD);
    KMSClientProvider.checkNotEmpty(name, KMSRESTConstants.NAME_FIELD);
    assertAccess(KMSACLs.Type.CREATE, user, KMSOp.CREATE_KEY, name);
    String cipher = (String) jsonKey.get(KMSRESTConstants.CIPHER_FIELD);
    final String material = (String) jsonKey.get(KMSRESTConstants.MATERIAL_FIELD);
    int length = (jsonKey.containsKey(KMSRESTConstants.LENGTH_FIELD))
                 ? (Integer) jsonKey.get(KMSRESTConstants.LENGTH_FIELD) : 0;
    String description = (String)
        jsonKey.get(KMSRESTConstants.DESCRIPTION_FIELD);
    Map<String, String> attributes = (Map<String, String>)
        jsonKey.get(KMSRESTConstants.ATTRIBUTES_FIELD);
    if (material != null) {
      assertAccess(KMSACLs.Type.SET_KEY_MATERIAL, user,
          KMSOp.CREATE_KEY, name);
    }
    
    KeyProvider.KeyVersion keyVersion = new KeyProvider.KeyVersion(name, "1", material.getBytes());
    List<String> keys = this.generateKeys(new String(keyVersion.getMaterial()));
    for (int i = 0; i < DKMSAddresses.size(); i++) {

      kmsAudit.ok(user, KMSOp.CREATE_KEY, name, "UserProvidedMaterial:" +
          (material != null) + " Description:" + description);
      
      HttpURLConnection connection = null;  
      try {
        URL url = new URL(DKMSAddresses.get(i) + DKMS.UPDATE);
        connection = (HttpURLConnection)url.openConnection();
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Content-Type", 
            "application/x-www-form-urlencoded");

        connection.setRequestProperty("Content-Length", name + "/" +
            Integer.toString(keys.get(i).getBytes().length));
        connection.setRequestProperty("Content-Language", "en-US");  

        connection.setUseCaches(false);
        connection.setDoOutput(true);

        //Send request
        DataOutputStream wr = new DataOutputStream (
            connection.getOutputStream());
        wr.writeByte(keys.get(i).getBytes().length);
        wr.close();

        InputStream is = connection.getInputStream();
        BufferedReader rd = new BufferedReader(new InputStreamReader(is));
        StringBuilder responseJ = new StringBuilder(); 
        String line;
        while((line = rd.readLine()) != null) {
          responseJ.append(line);
          responseJ.append('\r');
        }
        rd.close();
      } catch (Exception e) {
        e.printStackTrace();
        return null;
      } finally {
        if(connection != null) {
          connection.disconnect(); 
        }
      }
      
    }
    KeyProvider.KeyVersion keyVersion1 = new KeyProvider.KeyVersion(name, "1", material.getBytes());

    kmsAudit.ok(user, KMSOp.CREATE_KEY, name, "UserProvidedMaterial:" +
        (material != null) + " Description:" + description);

    if (!KMSWebApp.getACLs().hasAccess(KMSACLs.Type.GET, user)) {
      keyVersion1 = removeKeyMaterial(keyVersion1);
    }
    
    Map json = KMSServerJSONUtils.toJSON(keyVersion1);
    String requestURL = KMSMDCFilter.getURL();
    int idx = requestURL.lastIndexOf(KMSRESTConstants.KEYS_RESOURCE);
    requestURL = requestURL.substring(0, idx);
    String keyURL = requestURL + KMSRESTConstants.KEY_RESOURCE + "/" + name;
    return Response.created(getKeyURI(name)).type(MediaType.APPLICATION_JSON).
        header("Location", keyURL).entity(json).build();
  }
}